import Head from 'next/head'
import { useState, useEffect } from 'react'
import { useRouter } from "next/router";
import Image from 'next/image';
import { getDatabase, get, ref, child } from 'firebase/database'

export default function Discover() {
    const [windowHeight, setWindowHeight] = useState(null)
    const router = useRouter();
    const searchQueryTemp = router.query.searchInfo;
    const [usersData, setUsersData] = useState([])
    const [allUsers, setAllUsers] = useState([])
    const db = getDatabase();
    const [searchQueryFilter, setSearchQueryFilter] = useState('')

    //Window size
    useEffect(() => {
        const handleResize = () => {
            setWindowHeight(window.innerHeight)
        }

        handleResize()

        window.addEventListener('resize', handleResize)
        return () => window.removeEventListener('resize', handleResize)
    }, [])

    //Fetch data
    useEffect(() => {
        const fetchData = async () => {
            try {
                const snapshot = await get(child(ref(db), 'users/'))

                var users = []
                snapshot.forEach((childSnapshot) => {
                    const user = childSnapshot.val()
                    users.push(user)
                })

                setAllUsers(users)

                if (searchQueryTemp) {
                    users = users.filter((u) =>
                        u.userName.toLowerCase().includes(searchQueryTemp.toLowerCase()) ||
                        u.firstName.toLowerCase().includes(searchQueryTemp.toLowerCase()) ||
                        u.lastName.toLowerCase().includes(searchQueryTemp.toLowerCase())
                    )
                }

                setUsersData(users)
            } catch (error) {

            }
        }
        fetchData()
    }, [db, searchQueryTemp]);

    const search = () => {
        if (!searchQueryFilter) {
            setUsersData(allUsers)
            return
        }

        if (!isNaN(searchQueryFilter)) {
            setUsersData(allUsers.filter((user) => user.links.length - 1 === Number(searchQueryFilter)))
            return
        }

        setUsersData(allUsers.filter((u) =>
            u.userName.toLowerCase().includes(searchQueryFilter.toLowerCase()) ||
            u.firstName.toLowerCase().includes(searchQueryFilter.toLowerCase()) ||
            u.lastName.toLowerCase().includes(searchQueryFilter.toLowerCase())
        ))
    }

    return (
        <>
            <Head>
                <title>Linktree</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <div className='discover_header'>
                <div className='discover_search'>
                    <a className='cursor-pointer' onClick={search}><Image className='max-w-[25px]' src='https://ik.imagekit.io/ricardo5ro/Linktree/icons/search__1_.png?updatedAt=1681465571645' alt='Search Icon' width={200} height={200}></Image></a>
                    <input placeholder='Link title, name, nÂº links...' autoComplete='off' onChange={(e) => setSearchQueryFilter(e.target.value)}></input>
                </div>
            </div>
            <div className='discover_main'>
                <div className='discover_list'>
                    {usersData.length > 0 ? (
                        usersData.map((item, index) => (
                            <div className={`discover_profile ${(index + 1) % 2 === 0 ? 'bg-[#f372728f]' : 'bg-[var(--background-grey)]'}`} style={{ minHeight: windowHeight }} key={index}>
                                <Image
                                    className='max-w-[70px]'
                                    src={item.gender === 'male' ?
                                        'https://ik.imagekit.io/ricardo5ro/Linktree/icons/user.png?updatedAt=1684087499218' :
                                        'https://ik.imagekit.io/ricardo5ro/Linktree/icons/woman.png?updatedAt=1684161997979'}
                                    width={500} height={500} alt='User photo'>
                                </Image>
                                <h3>@{item.userName}</h3>
                                {item.links.slice(1).map((link, indexLink) => (
                                    <a key={indexLink} className={`discover_link ${(index % 2 === 0 ? 'discover_link_odd' : 'discover_link_even')}`} href={link.url} target="_blank" rel="noopener noreferrer">{link.title}</a>
                                ))}
                            </div>
                        ))
                    ) : (
                        <div className='discover_notFound' style={{ minHeight: windowHeight }}>
                            <Image className='max-w-[150px]' src='https://ik.imagekit.io/ricardo5ro/Linktree/icons/interrogation-mark.png?updatedAt=1685028444428' width={500} height={500} alt='Not found icon'></Image>
                            <h3>Not found any users based on your search</h3>
                            <span>Please try again with different keywords or filters, or even without filters</span>
                        </div>
                    )}
                </div>
            </div>
        </>
    )
}